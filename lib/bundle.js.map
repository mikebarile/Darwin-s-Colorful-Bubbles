{"version":3,"sources":["webpack:///webpack/bootstrap 4e064b7332b0a4738569","webpack:///./lib/bubbles.js","webpack:///./lib/game.js","webpack:///./lib/bubble.js","webpack:///./lib/moving_object.js","webpack:///./lib/game_view.js","webpack:///./lib/user_bubble.js","webpack:///./lib/physics.js","webpack:///./lib/color.js","webpack:///./lib/glitter.js","webpack:///./lib/pellet.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;;AAEf;AACA,qCAAoC,8BAA8B;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH,EAAC;;;;;;;ACvDD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,oBAAmB,yBAAyB;AAC5C,0BAAyB,yBAAyB;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAAyC,kBAAkB,EAAE;AAC7D;;AAEA;AACA,0CAAyC,oBAAoB,EAAE;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC/MA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAmB,yEAAyE;AAC5F;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;AC5FA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;AC1EA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,mBAAmB;AACtC;AACA;AACA;;AAEA;AACA;AACA,oBAAmB,sEAAsE;AACzF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpHA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC9KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACrGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4e064b7332b0a4738569","const Game = require('./game.js');\nconst GameView = require('./game_view.js');\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let canvas = document.getElementById('game-canvas');\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  const ctx = canvas.getContext(\"2d\");\n\n  let game = new Game();\n  let gv = new GameView(game, ctx);\n  let pause = document.getElementById('pause');\n  let corner = document.getElementById('corner-instructions');\n  let display = document.getElementById('start-display');\n  let space = document.getElementById('press-space');\n  let difficulty = document.getElementById('difficulty');\n\n  let caveman = document.getElementById('caveman');\n  let newton = document.getElementById('newton');\n  let relativity = document.getElementById('relativity');\n  let quantum = document.getElementById('quantum');\n  let string = document.getElementById('string');\n  let dSettings = [caveman, newton, relativity, quantum, string];\n  let dHash = {\"caveman\": 1, \"newton\": 1.5, \"relativity\": 2, \"quantum\": 3, \"string\": 4};\n\n  const setDifficulty = (e) => {\n    dSettings.forEach((setting) => {setting.className=\"d-choice\";});\n    e.target.className = \"d-choice selected\";\n    game.difficulty = dHash[e.target.id];\n  };\n\n  caveman.addEventListener(\"click\", setDifficulty);\n  newton.addEventListener(\"click\", setDifficulty);\n  relativity.addEventListener(\"click\", setDifficulty);\n  quantum.addEventListener(\"click\", setDifficulty);\n  string.addEventListener(\"click\", setDifficulty);\n\n  pause.addEventListener(\"click\", () => {\n    gv.run = !gv.run;\n    if (gv.run) {\n      gv.start();\n    }\n  });\n\n  document.addEventListener(\"keydown\", () => {\n  \tif (event.which === 32 && !gv.run){\n      pause.className = \"pause\";\n      corner.className = \"corner-instructions\";\n      display.className = \"start-display gone\";\n      space.className = \"press-space gone\";\n      difficulty.className = \"difficulty gone\";\n      gv.run = true;\n  \t\tgv.start();\n  \t}\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/bubbles.js\n// module id = 0\n// module chunks = 0","const Bubble = require('./bubble.js');\nconst UserBubble = require('./user_bubble.js');\nconst Physics = require('./physics.js');\nconst Color = require('./color.js');\n\nclass Game {\n  constructor () {\n    this.bubbles = [];\n    this.userBubbles = [];\n    this.glitter = [];\n    this.pellets = [];\n    this.difficulty = 2;\n    this.gameOver = false;\n    this.addUserBubble();\n    this.draw = this.draw.bind(this);\n    this.moveObjects = this.moveObjects.bind(this);\n    this.checkCollisions = this.checkCollisions.bind(this);\n    this.step = this.step.bind(this);\n    this.allBubbles = this.allBubbles.bind(this);\n    this.checkRadius = this.checkRadius.bind(this);\n    this.applyGravity = this.applyGravity.bind(this);\n    this.checkEnd = this.checkEnd.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n    this.checkBox = this.checkBox.bind(this);\n    this.checkWin = this.checkWin.bind(this);\n    this.shuffle = this.shuffle.bind(this);\n  }\n\n  allBubbles() {\n    let newArray = this.userBubbles.concat(this.bubbles).concat(this.glitter).concat(this.pellets);\n    return newArray;\n  }\n\n  addBubbles() {\n    let colors = [\"#4C00FF\", \"#0042FF\",\"#0088FF\",\"#0400FF\",\"#01CEFF\",\n      \"#00FFF8\",\"#00FF62\",\"#00FF17\",\"#00FFAD\",\"#40FF01\",\"#9DFF00\",\"#FFE600\",\n      \"#FFCB00\",\"#F9FF00\",\"#FFB101\",\"#FF9900\",\"#FF4E00\",\"#FF2700\",\"#FF7400\",\n      \"#FF0101\",\"#FF0060\",\"#C500FF\",\"#7D00FF\",\"#FF00E4\",\"#FF00BB\"];\n    colors = this.shuffle(colors);\n    for (var i = 0; i < Game.NUM_BUBBLES; i++) {\n      let bubble = new Bubble(this, i, colors[i]);\n      while(this.checkCollision(bubble) || this.checkBox(bubble)){\n        bubble = new Bubble(this, i, colors[i]);\n      }\n      this.bubbles.push(bubble);\n    }\n  }\n\n  shuffle(array) {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  checkBox(bubble) {\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n    let x = bubble.pos[0];\n    let y = bubble.pos[1];\n    return (\n      (x > width/2 - 300 && x < width/2 + 300) &&\n      (y > height/2 - 300 && y < height/2 + 300)\n    );\n  }\n\n  addUserBubble() {\n    this.userBubbles.push(new UserBubble(this));\n  }\n\n  // Function to ensure bubbles are initialized separated from one another\n  checkCollision(bubble) {\n    let collided = false;\n    for (var i = 0; i < this.allBubbles().length; i++) {\n      if (this.allBubbles()[i].isCollidedWith(bubble)){\n        collided = true;\n      }\n    }\n    return collided;\n  }\n\n  checkCollisions() {\n\n    this.checkUserCollision();\n\n    for (var i = 0; i < this.bubbles.length; i++) {\n      for (var j = i + 1; j < this.bubbles.length; j++) {\n        if (this.bubbles[i].isCollidedWith(this.bubbles[j])) {\n          Physics.collide(this.bubbles[i], this.bubbles[j]);\n        }\n      }\n    }\n  }\n\n  checkUserCollision() {\n    let user = this.userBubbles[0];\n\n    for (var i = 0; i < this.bubbles.length; i++) {\n      let bubble = this.bubbles[i];\n      if (user.isCollidedWith(bubble)) {\n        if (user.radius >= bubble.radius) {\n          if (bubble.alive === true) {\n            user.absorbBubble(bubble);\n          }\n        }\n        else {\n          user.createGlitter(bubble);\n          user.alive = false;\n        }\n      }\n    }\n  }\n\n  checkRadius() {\n    this.bubbles = this.bubbles.filter(obj => {\n      return obj.radius > 1;\n    });\n\n    this.glitter = this.glitter.filter(obj => {\n      return obj.radius > 0.005;\n    });\n\n    this.pellets = this.pellets.filter(obj => {\n      return obj.radius > 0.005;\n    });\n  }\n\n  applyGravity() {\n    this.bubbles.forEach(bubble => {\n      this.allBubbles().forEach(obj => {\n        if (bubble.pos[0] !== obj.pos[0] && bubble.pos[1] !== obj.pos[1]) {\n          obj.vel = Physics.calculateGravity(obj, bubble);\n        }\n      });\n    });\n    this.userBubbles.forEach(bubble => {\n      this.allBubbles().forEach(obj => {\n        if (bubble.pos[0] !== obj.pos[0] && bubble.pos[1] !== obj.pos[1]) {\n          obj.vel = Physics.calculateGravity(obj, bubble);\n        }\n      });\n    });\n  }\n\n  step(delta) {\n    this.moveObjects(delta);\n    this.checkCollisions();\n    this.checkRadius();\n    this.applyGravity();\n    this.userBubbles[0].setRandomColor();\n    this.userBubbles[0].moveUserBubble();\n    this.checkEnd();\n    this.checkWin();\n  }\n\n  draw(ctx) {\n    ctx.clearRect(0, 0, Game.X_COORD, Game.Y_COORD);\n    this.allBubbles().forEach(bubble => { bubble.draw(ctx); });\n  }\n\n  moveObjects(delta) {\n    this.allBubbles().forEach(bubble => { bubble.move(delta); });\n  }\n\n  resetGame() {\n    this.bubbles = [];\n    this.userBubbles = [];\n    this.glitter = [];\n    this.pellets = [];\n    this.addUserBubble();\n    this.addBubbles();\n    this.gameOver = false;\n  }\n\n  checkEnd() {\n    if(!this.userBubbles[0].alive && !this.gameOver) {\n      this.gameOver = true;\n      let end = document.getElementById('end-display');\n      end.className = 'end-display';\n      let difficulty = document.getElementById('difficulty');\n      difficulty.className = 'difficulty-end';\n    }\n  }\n\n  checkWin() {\n    if(this.userBubbles[0].alive && this.bubbles.length === 0 && !this.gameOver) {\n      this.gameOver = true;\n      this.userBubbles[0].won = true;\n      let win = document.getElementById('win-display');\n      win.className = 'win-display';\n      let difficulty = document.getElementById('difficulty');\n      difficulty.className = 'difficulty-end';\n    }\n  }\n}\n\nGame.X_COORD = window.innerWidth;\nGame.Y_COORD = window.innerHeight;\nGame.NUM_BUBBLES = 25;\n\nmodule.exports = Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 1\n// module chunks = 0","const Physics = require('./physics.js');\nconst MovingObject = require('./moving_object');\nconst Glitter = require('./glitter');\nconst Color = require('./color');\n\nconst RADIUS = 50;\nconst SPEED = 3;\n\nclass Bubble extends MovingObject {\n  constructor(game, idx, color) {\n    let opts = {};\n    let speed = Math.floor(Math.random() * SPEED) + 1;\n    opts.radius = Math.floor((Math.random()*.5+.5) * idx * game.difficulty) + 1;\n    opts.vel = Physics.randomVec(speed);\n    opts.pos = Physics.randomPos(opts.radius);\n    opts.color = color;\n    super(opts);\n    this.game = game;\n    this.createGlitter = this.createGlitter.bind(this);\n  }\n\n  bounce (x, y, otherBubble) {\n    this.vel = [x, y];\n    this.createGlitter(otherBubble);\n    this.pos = [this.pos[0] + x, this.pos[1] + y];\n  }\n\n  createGlitter(otherBubble) {\n    let poc = Physics.pointOfContact(this, otherBubble);\n    for (var i = 0; i < this.radius*(Physics.mag(this.vel)+Physics.mag(otherBubble.vel))/10; i++) {\n      this.game.glitter.push(new Glitter(this.color, poc, this.radius, this.vel));\n      this.radius = this.radius - .01;\n    }\n  }\n}\n\nmodule.exports = Bubble;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/bubble.js\n// module id = 2\n// module chunks = 0","const Color = require('./color.js');\nconst Physics = require('./physics');\n\nclass MovingObject {\n  constructor(options) {\n    this.pos = options.pos;\n    this.vel = options.vel;\n    this.radius = options.radius;\n    this.color = options.color;\n    this.alive = true;\n    this.glitter = false;\n    this.pellet = false;\n    this.won = false;\n    this.stop = false;\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.arc(this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true);\n    ctx.fill();\n  }\n\n  isCollidedWith(otherObject) {\n    let distance = Math.sqrt(Math.pow((this.pos[0] - otherObject.pos[0]), 2) +\n      Math.pow((this.pos[1] - otherObject.pos[1]), 2));\n    return (distance < this.radius + otherObject.radius);\n  }\n\n  move(delta) {\n\n    // Logic for shrinking dead bubbles\n\n    if (this.alive === false && this.radius > 0 && !this.glitter) {\n      if (this.radius < 3) {\n        this.radius = 0;\n      }\n      else if (this.won)\n        this.radius = this.radius - 3;\n      else {\n        this.radius = this.radius - 1;\n      }\n    }\n\n    if (this.glitter && this.radius >= 0.005) {\n      this.radius = this.radius - 0.005;\n    }\n\n    if (this.pellet && this.radius >= 0.005) {\n      this.radius = this.radius - 0.005;\n    }\n\n    // Logic for growing user bubble upon absorption\n    if (this.targetRadius !== null && this.radius < this.targetRadius) {\n      this.radius = this.radius + .1;\n    }\n\n    // Logic for changing color to white and exploding on win\n\n    if (this.won) {\n      let white = Color.changeToWhite(this);\n    }\n\n    delta = delta || 1;\n\n    if (this.pos[0] - this.radius <= 0) {\n      this.pos[0] = 0 + this.radius;\n      this.vel[0] = this.vel[0] * -1;\n    }\n    else if (this.pos[0] + this.radius >= window.innerWidth) {\n      this.pos[0] = window.innerWidth - this.radius;\n      this.vel[0] = this.vel[0] * -1;\n    }\n\n\n    if (this.pos[1] - this.radius <= 0) {\n      this.pos[1] = 0 + this.radius;\n      this.vel[1] = this.vel[1] * -1;\n    }\n    else if (this.pos[1] + this.radius >= window.innerHeight) {\n      this.pos[1] = window.innerHeight - this.radius;\n      this.vel[1] = this.vel[1] * -1;\n    }\n\n    this.pos = [\n      this.pos[0] + delta/20 * this.vel[0],\n      this.pos[1] + delta/20 * this.vel[1]\n    ];\n  }\n\n}\n\nmodule.exports = MovingObject;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/moving_object.js\n// module id = 3\n// module chunks = 0","const Game = require('./game.js');\n\nconst MOVES = {\n  \"w\": [ 0, -1],\n  \"a\": [-1,  0],\n  \"s\": [ 0,  1],\n  \"d\": [ 1,  0],\n  \"up\": [ 0, -1],\n  \"left\": [-1,  0],\n  \"down\": [ 0,  1],\n  \"right\": [ 1,  0]\n};\n\nclass GameView {\n  constructor(game, ctx) {\n    this.game = game;\n    this.game.gameView = this;\n    this.ctx = ctx;\n    this.start = this.start.bind(this);\n    this.userBubble = this.game.userBubbles[0];\n    this.lastTime = 0;\n    this.run = false;\n    this.paused = false;\n    this.firstGame = true;\n  }\n\n  animate(curTime) {\n    let delta = curTime - this.lastTime;\n\n    if (delta > 35) {\n      delta = 16.66;\n    }\n\n    this.game.draw(this.ctx);\n    this.game.step(delta);\n    this.lastTime = curTime;\n\n    if(this.run === true) {\n      requestAnimationFrame(this.animate.bind(this));\n    }\n  }\n\n  bindKeyHandlers() {\n    const ship = this.userBubble;\n    document.onkeydown = this.userBubble.propel;\n    document.onkeyup = this.userBubble.propel;\n    if (this.firstGame) {\n      this.firstGame = false;\n      document.addEventListener(\"keydown\", () => {\n        if (event.which === 32) {\n          let win = document.getElementById('win-display');\n          let end = document.getElementById('end-display');\n          let difficulty = document.getElementById('difficulty');\n          this.game.resetGame();\n          win.className = 'win-display gone';\n          end.className = 'end-display gone';\n          difficulty.className = \"difficulty gone\";\n          this.userBubble = this.game.userBubbles[0];\n          this.bindKeyHandlers();\n        }\n      });\n    }\n  }\n\n  start() {\n    if (!this.paused) {\n      this.game.addBubbles();\n    }\n    this.bindKeyHandlers();\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n}\n\nmodule.exports = GameView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game_view.js\n// module id = 4\n// module chunks = 0","const MovingObject = require('./moving_object');\nconst Pellet = require('./pellet');\nconst Physics = require('./physics');\nconst Color = require('./color');\nconst Glitter = require('./glitter');\n\nclass UserBubble extends MovingObject {\n  constructor (game) {\n    let opts = {};\n    opts.radius = 10;\n    opts.vel = [0, 0];\n    opts.pos = [window.innerWidth/2, window.innerHeight/2];\n    opts.color = \"Color.randomColor()\";\n    super(opts);\n    this.game = game;\n    this.firstAbsorb = false;\n    this.colorCount = 0;\n    this.up = false;\n    this.down = false;\n    this.left = false;\n    this.right = false;\n    this.velCounter = 0;\n    this.propel = this.propel.bind(this);\n  }\n\n  propel(e) {\n    if (e.type === \"keydown\") {\n      if (e.key === \"ArrowUp\" || e.key === \"w\") {\n        this.up = true;\n      }\n      if (e.key === \"ArrowDown\" || e.key === \"s\") {\n        this.down = true;\n      }\n      if (e.key === \"ArrowLeft\" || e.key === \"a\") {\n        this.left = true;\n      }\n      if (e.key === \"ArrowRight\" || e.key === \"d\") {\n        this.right = true;\n      }\n      if (e.key === \"p\"){\n        this.game.gameView.run = !this.game.gameView.run;\n        this.game.gameView.paused = true;\n        if (this.game.gameView.run) {\n          this.game.gameView.start();\n        }\n      }\n    }\n    else if (e.type === \"keyup\") {\n      if (e.key === \"ArrowUp\" || e.key === \"w\") {\n        this.up = false;\n      }\n      if (e.key === \"ArrowDown\" || e.key === \"s\") {\n        this.down = false;\n      }\n      if (e.key === \"ArrowLeft\" || e.key === \"a\") {\n        this.left = false;\n      }\n      if (e.key === \"ArrowRight\" || e.key === \"d\") {\n        this.right = false;\n      }\n    }\n  }\n\n  moveUserBubble() {\n    if (this.up) {\n      this.vel[1] -= .2;\n      this.velCounter += 1;\n    }\n    if (this.down) {\n      this.vel[1] += .2;\n      this.velCounter += 1;\n    }\n    if (this.left) {\n      this.vel[0] -= .2;\n      this.velCounter += 1;\n    }\n    if (this.right) {\n      this.vel[0] += .2;\n      this.velCounter += 1;\n    }\n    if ((this.vel[0] > 0 || this.vel[1] > 0) && this.alive && this.velCounter >= 10) {\n      this.velCounter = 0;\n      this.radius = this.radius * .999;\n      this.game.pellets.push(new Pellet(this.color, this.pos, this.radius, this.vel));\n    }\n  }\n\n  absorbBubble(bubble) {\n    this.targetRadius = Physics.addMassMath(this, bubble);\n    this.color = Color.colorDifference(this, bubble);\n    this.firstAbsorb = true;\n    bubble.alive = false;\n    for (var i = 0; i < bubble.radius; i++) {\n      bubble.createGlitter(this);\n    }\n  }\n\n  createGlitter(otherBubble) {\n    let poc = Physics.pointOfContact(this, otherBubble);\n    for (var i = 0; i < this.radius*(Physics.mag(this.vel)+Physics.mag(otherBubble.vel)); i++) {\n      this.game.glitter.push(new Glitter(this.color, poc, this.radius, this.vel));\n      this.radius = this.radius - .01;\n    }\n  }\n\n  setRandomColor() {\n    if (this.firstAbsorb === false) {\n      this.colorCount += 1;\n      if (this.colorCount === 15) {\n        this.color = Color.randomColor();\n        this.colorCount = 0;\n      }\n    }\n  }\n}\n\nmodule.exports = UserBubble;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/user_bubble.js\n// module id = 5\n// module chunks = 0","const G = .0001;\n\nclass Physics {\n  static addMassMath(user, bubble) {\n    let userMass = Math.PI * Math.pow(user.radius, 2);\n    let bubMass = Math.PI * Math.pow(bubble.radius, 2);\n\n    userMass = userMass + bubMass;\n    let newRadius = Math.sqrt(userMass / Math.PI);\n    return newRadius;\n  }\n\n  static mag(v) {\n    return Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));\n  }\n\n  // Physics engine governing elastic collisions\n  static collide(bub1, bub2) {\n    // Calculate mass for each bubble\n    let m1 = Math.PI * Math.pow((bub1.radius), 2);\n    let m2 = Math.PI * Math.pow((bub2.radius), 2);\n\n    // Calculate contact angle\n    let dx = bub1.pos[0] - bub2.pos[0];\n    let dy = bub1.pos[1] - bub2.pos[1];\n    let angle = Math.atan2(dy, dx);\n\n    // Calculate velocity magnitudes and directional vectors\n    let mag1 = this.mag(bub1.vel);\n    let mag2 = this.mag(bub2.vel);\n    let d1 = Math.atan2(bub1.vel[1], bub1.vel[0]);\n    let d2 = Math.atan2(bub2.vel[1], bub2.vel[0]);\n\n    // Calculate new speeds based on magnitude, direction and the collision angle\n    let newX1 = mag1*Math.cos(d1 - angle);\n    let newY1 = mag1*Math.sin(d1 - angle);\n    let newX2 = mag2*Math.cos(d2 - angle);\n    let newY2 = mag2*Math.sin(d2 - angle);\n\n    // Adjust final speeds\n    let finalX1 = ((m1 - m2)*newX1 + (m2+m2)*newX2) / (m1+m2);\n    let finalX2 = ((m1 + m1)*newX1 + (m2 - m1)*newX2) / (m1+m2);\n    let finalY1 = newY1;\n    let finalY2 = newY2;\n\n    let x1 = Math.cos(angle)*finalX1 + Math.cos(angle + Math.PI/2)*finalY1;\n    let y1 = Math.sin(angle)*finalX1 + Math.sin(angle + Math.PI/2)*finalY1;\n    let x2 = Math.cos(angle)*finalX2 + Math.cos(angle + Math.PI/2)*finalY2;\n    let y2 = Math.sin(angle)*finalX2 + Math.sin(angle + Math.PI/2)*finalY2;\n\n    bub1.bounce(x1, y1, bub2);\n    bub2.bounce(x2, y2, bub1);\n  }\n\n  static scale(vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  }\n\n  static randomVec(length) {\n    const deg = 2 * Math.PI * Math.random();\n    return this.scale([Math.sin(deg), Math.cos(deg)], length);\n  }\n\n  static randomPos(radius) {\n    let xPos = Math.floor(Math.random() * (window.innerWidth - 2*radius - 1)) + radius + 1;\n    let yPos = Math.floor(Math.random() * (window.innerHeight - 2*radius - 1)) + radius + 1;\n    return [xPos, yPos];\n  }\n\n  static pointOfContact(b1, b2) {\n    let x0 = b1.pos[0];\n    let y0 = b1.pos[1];\n\n    let dx = x0 - b2.pos[0];\n    let dy = y0 - b2.pos[1];\n\n\n\n    let mag = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n    let uv = [dx / mag, dy / mag];\n\n    return [x0 - b1.radius*uv[0], y0 - b1.radius*uv[1]];\n  }\n\n  static pelletPos(pos, radius, vel) {\n    let x0 = pos[0];\n    let y0 = pos[1];\n\n    let mag = this.mag(vel);\n    let uv = [vel[0] / mag, vel[1] / mag];\n\n    return [x0 + radius*uv[0], y0 + radius*uv[1]];\n  }\n\n  static changeToZero(bubble) {\n    let x = bubble.vel[0];\n    let y = bubble.vel[1];\n\n    if (x === 0 && y === 0) {\n      return true;\n    }\n\n    if (x > 0) {\n      x = x - 0.2;\n    }\n\n    if (x < 0) {\n      x = x + 0.2;\n    }\n\n    if (y > 0) {\n      y = y - 0.2;\n    }\n\n    if (y < 0) {\n      y = y + 0.2;\n    }\n\n    if (y > -0.2 && y < 0.2) {\n      y = 0;\n    }\n\n    if (x > -0.2 && x < 0.2) {\n      x = 0;\n    }\n\n    bubble.vel = [x, y];\n\n    return false;\n  }\n\n  static glitterVel(vel) {\n    let vx, vy, x, y;\n\n    if (vel[0] === 0){\n      vx = .001;\n    }\n    else {\n      vx = vel[0];\n    }\n\n    if (vel[1] === 0){\n      vy = .001;\n    }\n    else {\n      vy = vel[1];\n    }\n\n    x = Math.random()*4*Math.sign(vx) + vel[0];\n    y = Math.random()*4*Math.sign(vy) + vel[1];\n    return [x,y];\n  }\n\n  static calculateGravity(obj1, obj2) {\n    let m1 = Math.PI * Math.pow(obj1.radius, 2);\n    let m2 = Math.PI * Math.pow(obj2.radius, 2);\n\n    if (obj1.glitter === true){\n      m2 = m2 * 50;\n    }\n\n    let dx = obj2.pos[0] - obj1.pos[0];\n    let dy = obj2.pos[1] - obj1.pos[1];\n    let d = this.mag([dx, dy]);\n\n    let a = G * m2 / (d * d);\n\n    let vx = a * dx;\n    let vy = a * dy;\n\n    return [obj1.vel[0] + vx, obj1.vel[1] + vy];\n  }\n}\n\nmodule.exports = Physics;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/physics.js\n// module id = 6\n// module chunks = 0","const COLORS = [\n  \"#4C00FF\",\n  \"#0042FF\",\n  \"#0088FF\",\n  \"#0400FF\",\n  \"#01CEFF\",\n  \"#00FFF8\",\n  \"#00FF62\",\n  \"#00FF17\",\n  \"#00FFAD\",\n  \"#40FF01\",\n  \"#9DFF00\",\n  \"#FFE600\",\n  \"#FFCB00\",\n  \"#F9FF00\",\n  \"#FFB101\",\n  \"#FF9900\",\n  \"#FF4E00\",\n  \"#FF2700\",\n  \"#FF7400\",\n  \"#FF0101\",\n  \"#FF0060\",\n  \"#C500FF\",\n  \"#7D00FF\",\n  \"#FF00E4\",\n  \"#FF00BB\"\n];\n\nclass Color {\n  static randomColor() {\n    return COLORS[Math.floor(Math.random()*25)];\n  }\n\n  static bubbleColor(idx) {\n    return COLORS[idx];\n  }\n\n  static parseHexColor(c) {\n    var j = {};\n\n    j.red = parseInt(c.slice(1,3), 16);\n    j.green = parseInt(c.slice(3,5), 16);\n    j.blue = parseInt(c.slice(5,7), 16);\n\n    return j;\n  }\n\n  static colorDifference(user, bubble) {\n    let userColor = this.parseHexColor(user.color);\n    let bubColor = this.parseHexColor(bubble.color);\n\n    if(typeof(userColor) != 'undefined' && typeof(bubColor) != 'undefined') {\n      return (\"#\" + this.weighColors(user, bubble, userColor.red, bubColor.red) +\n        this.weighColors(user, bubble, userColor.green, bubColor.green) +\n        this.weighColors(user, bubble, userColor.blue, bubColor.blue));\n    }\n  }\n\n  static changeToWhite(bubble) {\n    let color = this.parseHexColor(bubble.color);\n    if (color.red === 255 && color.green === 255 && color.blue === 255) {\n      return true;\n    }\n\n    if (color.red < 255) {\n      color.red = color.red + 1;\n    }\n    if (color.green < 255) {\n      color.green = color.green + 1;\n    }\n\n    if (color.blue < 255) {\n      color.blue = color.blue + 1;\n    }\n\n    if (color.red > 255) {\n      color.red = 255;\n    }\n    if (color.green > 255) {\n      color.green = 255;\n    }\n    if (color.blue > 255) {\n      color.blue = 255;\n    }\n\n    bubble.color = (\"#\" + color.red.toString(16) + color.green.toString(16) + color.blue.toString(16));\n    return false;\n  }\n\n  static weighColors(b1, b2, c1, c2) {\n    let m1 = Math.PI * Math.pow(b1.radius,2);\n    let m2 = Math.PI * Math.pow(b2.radius,2);\n\n    let string = Math.abs(Math.floor((c1*m1 + c2*m2) / (m1 + m2))).toString(16);\n    if (string.length === 1) {\n      string = \"0\" + string;\n    }\n    return string;\n  }\n}\n\nmodule.exports = Color;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/color.js\n// module id = 7\n// module chunks = 0","const Physics = require('./physics.js');\nconst MovingObject = require('./moving_object');\n\nclass Glitter extends MovingObject {\n  constructor(color, pos, radius, vel) {\n    let opts = {};\n    let speed = 3;\n    opts.radius = 1;\n    opts.vel = Physics.glitterVel(vel);\n    opts.pos = pos;\n    opts.color = color;\n    super(opts);\n    this.glitter = true;\n  }\n}\n\nmodule.exports = Glitter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/glitter.js\n// module id = 8\n// module chunks = 0","const Physics = require('./physics.js');\nconst MovingObject = require('./moving_object');\n\nclass Pellet extends MovingObject {\n  constructor(color, pos, radius, vel) {\n    let opts = {};\n    let speed = 3;\n    opts.radius = 1;\n    opts.vel = [vel[0]*-1 / 5, vel[1]*-1 / 5];\n    opts.pos = Physics.pelletPos(pos, radius, vel);\n    opts.color = color;\n    super(opts);\n    this.pellet = true;\n  }\n}\n\nmodule.exports = Pellet;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/pellet.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}